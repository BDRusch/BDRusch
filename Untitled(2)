{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Untitled","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNwhveZj1zxDXamKZxOYETq"},"kernelspec":{"name":"python2","display_name":"Python 2"}},"cells":[{"cell_type":"code","metadata":{"id":"9a8aUWz5u0_M","colab_type":"code","colab":{}},"source":["# all i can think of \n","#creat a list\n","my_list = [] # put numbers in or strings(\"\")\n","my_list.append(5) # adds 5 to the list - and can add more than one element\n","print(my_list)# prints the list\n","a = type(my_list) # 'a' is now a variable \n","print(a) # type syntax tells you if = boolean, list, tuple, string, integer, float\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"jlWMelv_2Vwn","colab_type":"code","colab":{}},"source":["# join syntax\n","A= \"hello\" # this is a string as has \"\"\n","B= \"world\"\n","C= \"!\"\n","list = [ A, B, C] #add three strings to a list = square brackets\n","separator = \" \"\n","x = separator.join(list)  # join() connects anything in a list with a separator\n","\n","print(x)\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"-FRD-bJZ2O-t","colab_type":"code","colab":{}},"source":["# length of string\n","string = \"Some words put together\"\n","print(len(string)) # gives the number of symbols in the string including spaces \n","print(string[0]) # gives the letter in the string at position 0\n","print(string[-2])\n","print(string[len(string)-1])\n","print(string[22])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"lA3_AV9P2GZG","colab_type":"code","colab":{}},"source":["# userinputs\n","userin = input( \"what is your favourite number : \")\n","print(userin)\n","print(userin*3)\n","print(type(userin*3))\n","\n","userin2 = input( \"How many dogs do you have : \")\n","print(userin2)\n","\n","print(userin + userin2) # since the inputs represtent strings they cant be added until they are turned into integers\n","eval(userin) + eval(userin2)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"MzHDO0o42sB3","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"eef4c6a7-c5b4-4387-d98b-15980b73ccb1","executionInfo":{"status":"ok","timestamp":1581324116146,"user_tz":-60,"elapsed":659,"user":{"displayName":"B.D. Rusch","photoUrl":"","userId":"05653210645492065761"}}},"source":["#numpy for numerical calculattions\n","#sympy for symbolic equations\n","def add_one(arg):\n","  return arg + 1\n","\n","add_one(5)\n"],"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["6"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"0B6Ghb2BQx0y","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"cef4cc34-ee0d-4a4b-f9aa-79d5b7d03694","executionInfo":{"status":"ok","timestamp":1581324162189,"user_tz":-60,"elapsed":538,"user":{"displayName":"B.D. Rusch","photoUrl":"","userId":"05653210645492065761"}}},"source":["#lambda functions\n","lambdaquadratic = lambda x: x**2\n","print(lambdaquadratic)"],"execution_count":3,"outputs":[{"output_type":"stream","text":["<function <lambda> at 0x7fa1e8b38cd0>\n"],"name":"stdout"}]}]}