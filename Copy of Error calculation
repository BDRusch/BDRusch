{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Error calculation","provenance":[{"file_id":"1UHlrEeLRocFb0xHuT_PqRL10inWA5sxP","timestamp":1606738498040}]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NdImG-4XdJIA","executionInfo":{"status":"ok","timestamp":1606663343495,"user_tz":-60,"elapsed":467,"user":{"displayName":"knightmare","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiE-Yob4WrV_bxwUDVHTvprKRmTwuBvquBh0atzoQ=s64","userId":"08311968273579497711"}},"outputId":"f6f64e96-89b0-498a-92fb-480115cc5281"},"source":["#Error calculations\n","\n","'''\n","Glass\n","Water\n","Vinegar\n","White Wine\n","Sugar water\n","Oil\n","'''\n","\n","# Errors of n\n","\n","import numpy as np\n","\n","n = [1.003, 1.206, 1.133, 1.229,1.159, 1.306]\n","n_g= [1.51,1.518,1.537]\n","n_w = [1.296,1.32,1.302]\n","n_v = [1.205,1.258,1.225]\n","n_wine = [1.203,1.199,1.215]\n","n_sw = [1.178,1.134,1.164]\n","n_oil = [1.157,1.115,1.127]\n","\n","\n","# incident and refractive angles:\n","\n","'''\n","incident angles\n","36,38,50,35,43,39,28,32,35,33,38,44,31,38,43,34,42,45\n","'''\n","theta1_g = [36,38,50]\n","theta1_w = [35,43,39]\n","theta1_v = [28,32,35]\n","theta1_wine = 33,38,44\n","theta1_sw = [31,38,43]\n","theta1_oil = [34,42,45]\n","\n","'''\n","refractive angles\n","\n","23,24,30,26,31,29,23,25,28,27,31,35,26,33,36,29,37,39\n","\n","'''\n","theta2_g = [23,24,30]\n","theta2_w = [26,31,29]\n","theta2_v = [23,25,28]\n","theta2_wine = [27,31,35]\n","theta2_sw = [26,33,36]\n","theta2_oil = [29,37,39]\n","\n","\n","theta1_err = [1,1,1,1,1,1]\n","theta2_err = [1,1,1,1,1,1]\n","\n","'''refractive indexes : 1.51,1.518,1.537,1.296,1.32,1.302,1.205,1.258,1.225,1.203,1.199,1.215,1.178,1.134,1.164,1.157,1.115,1.127'''\n","\n","t = [79.3,91.9,100.9,102.5,102.7,129.9]\n","#calculation of errors\n","\n","n_gerror = []\n","n_werror = []\n","n_verror = []\n","n_wineerror = []\n","n_swerror = []\n","n_oilerror = []\n","\n","\n","#glass refractive index errors:\n","\n","\n","\n","for i in range(0,3):      #error propagation\n","  n_gerr = n_g[i]*(np.sqrt((((np.sin((2*np.pi/360)*theta1_err[i]))/(np.sin((2*np.pi/360)*theta1_g[i])))**2)+(((np.sin((2*np.pi/360)*theta2_err[i]))/(np.sin((2*np.pi/360)*theta2_g[i])))**2)))\n","  n_gerror.append(n_gerr)\n","\n","  n_werr = n_g[i]*(np.sqrt((((np.sin((2*np.pi/360)*theta1_err[i]))/(np.sin((2*np.pi/360)*theta1_w[i])))**2)+(((np.sin((2*np.pi/360)*theta2_err[i]))/(np.sin((2*np.pi/360)*theta2_w[i])))**2)))\n","  n_werror.append(n_werr)\n","\n","  n_verr = n_g[i]*(np.sqrt((((np.sin((2*np.pi/360)*theta1_err[i]))/(np.sin((2*np.pi/360)*theta1_v[i])))**2)+(((np.sin((2*np.pi/360)*theta2_err[i]))/(np.sin((2*np.pi/360)*theta2_v[i])))**2)))\n","  n_verror.append(n_verr)\n","\n","  n_wineerr = n_g[i]*(np.sqrt((((np.sin((2*np.pi/360)*theta1_err[i]))/(np.sin((2*np.pi/360)*theta1_wine[i])))**2)+(((np.sin((2*np.pi/360)*theta2_err[i]))/(np.sin((2*np.pi/360)*theta2_wine[i])))**2)))\n","  n_wineerror.append(n_wineerr)\n","\n","  n_swerr = n_g[i]*(np.sqrt((((np.sin((2*np.pi/360)*theta1_err[i]))/(np.sin((2*np.pi/360)*theta1_sw[i])))**2)+(((np.sin((2*np.pi/360)*theta2_err[i]))/(np.sin((2*np.pi/360)*theta2_sw[i])))**2)))\n","  n_swerror.append(n_swerr)\n","\n","  n_oilerr = n_g[i]*(np.sqrt((((np.sin((2*np.pi/360)*theta1_err[i]))/(np.sin((2*np.pi/360)*theta1_oil[i])))**2)+(((np.sin((2*np.pi/360)*theta2_err[i]))/(np.sin((2*np.pi/360)*theta2_oil[i])))**2)))\n","  n_oilerror.append(n_oilerr)\n","\n","\n","ng_averr = (1/3)*(np.sqrt(n_gerror[0])**2) + ((n_gerror[1])**2) + (((n_gerror[2])**2))\n","nw_averr =  (1/3)*(np.sqrt(n_werror[0])**2) + ((n_werror[1])**2) + (((n_werror[2])**2))\n","nv_averr = (1/3)*(np.sqrt(n_verror[0])**2) + ((n_verror[1])**2) + (((n_verror[2])**2))\n","nwine_averr = (1/3)*(np.sqrt(n_wineerror[0])**2) + ((n_wineerror[1])**2) + (((n_wineerror[2])**2))\n","nsw_averr = (1/3)*(np.sqrt(n_swerror[0])**2) + ((n_swerror[1])**2) + (((n_swerror[2])**2))\n","noil_averr = (1/3)*(np.sqrt(n_oilerror[0])**2) + ((n_oilerror[1])**2) + (((n_oilerror[2])**2))\n","\n","print(ng_averr)\n","print(nw_averr)\n","print(nv_averr)\n","print(nwine_averr)\n","print(nsw_averr)\n","print(noil_averr)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[0.08098806175362995, 0.07806570465747469, 0.06406521702557108]\n","[0.07566311262783822, 0.06445856578966595, 0.06984413088589178]\n","[0.08774909906300478, 0.08018153486543149, 0.07383637091365179]\n","[0.07556976076335666, 0.0670642301017224, 0.06064871795729725]\n","[0.07894323922053242, 0.06494472762990751, 0.060246805454645856]\n","[0.07194248798672627, 0.05920705392238107, 0.05706069872454184]\n","0.0371946268607449\n","0.03425414686547901\n","0.04113058789074302\n","0.03336579820345278\n","0.03416190828792363\n","0.03074222790200943\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y1f7ZRh2pHcw","executionInfo":{"status":"ok","timestamp":1606666753219,"user_tz":-60,"elapsed":505,"user":{"displayName":"knightmare","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiE-Yob4WrV_bxwUDVHTvprKRmTwuBvquBh0atzoQ=s64","userId":"08311968273579497711"}},"outputId":"105a49ff-8f28-4d61-a98c-9518a7393fba"},"source":["#Error calculation for time taken\n","\n","\n","#glass\n","\n","D = 20 #distance of glass\n","c = 3*10**8\n","\n","n_w = [1.296,1.32,1.302]\n","n_v = [1.205,1.258,1.225]\n","n_wine = [1.203,1.199,1.215]\n","n_sw = [1.178,1.134,1.164]\n","n_oil = [1.157,1.115,1.127]\n","\n","n_medium = [1.003, 1.306, 1.229, 1.206, 1.159, 1.133]\n","\n","critical_angle = [57.5, 42,1, 53.1,61.0,48.8, 48.5]\n","\n","theta1_err = [1,1,1,1,1,1]\n","\n","time_errors = []\n","\n","\n","nave_err = [0,nw_averr,nv_averr,nwine_averr,nsw_averr,noil_averr]\n","\n","for i in range(len(nave_err)):\n","  t_err = np.sqrt((( (D*nave_err[i])/(c*(np.sin(critical_angle[i]*np.pi/180)) )**2 )+ \n","                   (((theta1_err[i])*D*np.cos(critical_angle[i]*np.pi/180))/c*(np.sin(critical_angle[i]*np.pi/180))**2))**2)\n","  \n","  time_errors.append(t_err)\n","\n","print(time_errors)\n","\n","\n","\n","\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[2.5479074495343908e-08, 2.2182167979832295e-08, 2.0332681689431355e-11, 2.5597737614190337e-08, 2.4723985926605947e-08, 2.486017835921357e-08]\n"],"name":"stdout"}]}]}